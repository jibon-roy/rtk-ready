{"version":3,"sources":["../src/index.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\n// import fs from 'fs';\r\n// import path from 'path';\r\n// import { execSync } from 'child_process';\r\n\r\n// const mainProjectRoot = process.env.INIT_CWD || process.cwd(); // Main project's root directory\r\n// const srcPath = path.join(mainProjectRoot, 'src'); // Path to the src folder\r\n// const reduxPath = fs.existsSync(srcPath)\r\n//   ? path.join(srcPath, 'redux')\r\n//   : path.join(mainProjectRoot, 'redux'); // Use src/redux if src exists, otherwise use root/redux\r\n// const templatePath = path.join(\r\n//   mainProjectRoot,\r\n//   './node_modules/rtk-ready/src/redux'\r\n// ); // Template folder inside your custom package\r\n\r\n// function copyFolderSync(from: string, to: string) {\r\n//   if (!fs.existsSync(from)) {\r\n//     console.error(`Source folder does not exist: ${from}`);\r\n//     return;\r\n//   }\r\n\r\n//   fs.mkdirSync(to, { recursive: true });\r\n//   fs.readdirSync(from).forEach((element) => {\r\n//     const stat = fs.lstatSync(path.join(from, element));\r\n//     if (stat.isFile()) {\r\n//       fs.copyFileSync(path.join(from, element), path.join(to, element));\r\n//     } else if (stat.isDirectory()) {\r\n//       copyFolderSync(path.join(from, element), path.join(to, element));\r\n//     }\r\n//   });\r\n// }\r\n\r\n// function createReduxFolder() {\r\n//   // Check if the source folder (template) exists\r\n//   if (!fs.existsSync(templatePath)) {\r\n//     console.error(\r\n//       'Template folder does not exist. Please ensure the src/redux-template folder exists.'\r\n//     );\r\n//     return;\r\n//   }\r\n\r\n//   // Check if the destination folder (redux) exists\r\n//   if (!fs.existsSync(reduxPath)) {\r\n//     console.log(`Creating Redux folder at ${reduxPath}...`);\r\n//     copyFolderSync(templatePath, reduxPath);\r\n//     console.log('Redux folder created.');\r\n//   } else {\r\n//     console.log('Redux folder already exists. Skipping.');\r\n//   }\r\n// }\r\n\r\n// function installDependencies() {\r\n//   const dependencies = [\r\n//     '@reduxjs/toolkit@latest',\r\n//     'js-cookie@latest',\r\n//     'react-redux@latest',\r\n//     'redux-persist@latest',\r\n//   ];\r\n\r\n//   const devDependencies = [\r\n//     '@types/js-cookie@latest',\r\n//     '@types/react-redux@latest',\r\n//   ];\r\n\r\n//   console.log('Installing dependencies in the main project...');\r\n//   try {\r\n//     execSync(`npm install ${dependencies.join(' ')}`, {\r\n//       cwd: mainProjectRoot, // Run in the main project's directory\r\n//       stdio: 'inherit',\r\n//     });\r\n\r\n//     // Check if the project uses TypeScript\r\n//     const tsconfigPath = path.join(mainProjectRoot, 'tsconfig.json');\r\n//     if (fs.existsSync(tsconfigPath)) {\r\n//       console.log('TypeScript detected. Installing dev dependencies...');\r\n//       execSync(`npm install --save-dev ${devDependencies.join(' ')}`, {\r\n//         cwd: mainProjectRoot, // Run in the main project's directory\r\n//         stdio: 'inherit',\r\n//       });\r\n//     }\r\n\r\n//     console.log('Dependencies installed successfully.');\r\n//   } catch (error: any) {\r\n//     console.error('Error installing dependencies:', error.message);\r\n//     process.exit(1);\r\n//   }\r\n// }\r\n\r\n\r\n//  createReduxFolder();\r\n//  installDependencies();\r\n\r\n\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport { execSync } from \"child_process\";\r\n\r\nconst mainProjectRoot = process.env.INIT_CWD || process.cwd();\r\nconst srcPath = path.join(mainProjectRoot, \"src\");\r\nconst reduxPath = fs.existsSync(srcPath)\r\n  ? path.join(srcPath, \"redux\")\r\n  : path.join(mainProjectRoot, \"redux\");\r\nconst templatePath = path.join(\r\n  mainProjectRoot,\r\n  \"./node_modules/rtk-ready/src/redux\"\r\n);\r\nconst markerFilePath = path.join(reduxPath, \".rtk-ready-installed\");\r\n\r\n// Utility to copy folder content recursively\r\nfunction copyFolderSync(from: string, to: string) {\r\n  if (!fs.existsSync(from)) {\r\n    console.error(`Source folder does not exist: ${from}`);\r\n    return;\r\n  }\r\n  fs.mkdirSync(to, { recursive: true });\r\n  fs.readdirSync(from).forEach((element) => {\r\n    const stat = fs.lstatSync(path.join(from, element));\r\n    if (stat.isFile()) {\r\n      fs.copyFileSync(path.join(from, element), path.join(to, element));\r\n    } else if (stat.isDirectory()) {\r\n      copyFolderSync(path.join(from, element), path.join(to, element));\r\n    }\r\n  });\r\n}\r\n\r\n// Create the Redux folder structure\r\nfunction createReduxFolder() {\r\n  if (!fs.existsSync(templatePath)) {\r\n    console.error(\r\n      \"Template folder does not exist. Please ensure the src/redux-template folder exists.\"\r\n    );\r\n    return;\r\n  }\r\n  if (!fs.existsSync(reduxPath)) {\r\n    console.log(`Creating Redux folder at ${reduxPath}...`);\r\n    copyFolderSync(templatePath, reduxPath);\r\n    fs.writeFileSync(markerFilePath, \"true\");\r\n    console.log(\"Redux folder created.\");\r\n  } else if (!fs.existsSync(markerFilePath)) {\r\n    console.log(\"Redux folder already exists but marker file is missing. Skipping.\");\r\n  } else {\r\n    console.log(\"Redux folder and marker file already exist. Skipping.\");\r\n  }\r\n}\r\n\r\n// Install required dependencies\r\nfunction installDependencies() {\r\n  const dependencies = [\r\n    \"@reduxjs/toolkit@latest\",\r\n    \"js-cookie@latest\",\r\n    \"react-redux@latest\",\r\n    \"redux-persist@latest\",\r\n  ];\r\n  const devDependencies = [\r\n    \"@types/js-cookie@latest\",\r\n    \"@types/react-redux@latest\",\r\n  ];\r\n\r\n  console.log(\"Installing dependencies in the main project...\");\r\n  try {\r\n    execSync(`npm install ${dependencies.join(\" \")}`, {\r\n      cwd: mainProjectRoot,\r\n      stdio: \"inherit\",\r\n    });\r\n\r\n    // Check for TypeScript support\r\n    const tsconfigPath = path.join(mainProjectRoot, \"tsconfig.json\");\r\n    if (fs.existsSync(tsconfigPath)) {\r\n      console.log(\"TypeScript detected. Installing dev dependencies...\");\r\n      execSync(`npm install --save-dev ${devDependencies.join(\" \")}`, {\r\n        cwd: mainProjectRoot,\r\n        stdio: \"inherit\",\r\n      });\r\n    }\r\n    console.log(\"Dependencies installed successfully.\");\r\n  } catch (error: any) {\r\n    console.error(\"Error installing dependencies:\", error.message);\r\n    // Exit process with a success code to prevent npm from failing.\r\n    process.exit(0);\r\n  }\r\n}\r\n\r\n// Main execution\r\ncreateReduxFolder();\r\ninstallDependencies();\r\n"],"mappings":";;;AA8FA,OAAO,QAAQ;AACf,OAAO,UAAU;AACjB,SAAS,gBAAgB;AAEzB,IAAM,kBAAkB,QAAQ,IAAI,YAAY,QAAQ,IAAI;AAC5D,IAAM,UAAU,KAAK,KAAK,iBAAiB,KAAK;AAChD,IAAM,YAAY,GAAG,WAAW,OAAO,IACnC,KAAK,KAAK,SAAS,OAAO,IAC1B,KAAK,KAAK,iBAAiB,OAAO;AACtC,IAAM,eAAe,KAAK;AAAA,EACxB;AAAA,EACA;AACF;AACA,IAAM,iBAAiB,KAAK,KAAK,WAAW,sBAAsB;AAGlE,SAAS,eAAe,MAAc,IAAY;AAChD,MAAI,CAAC,GAAG,WAAW,IAAI,GAAG;AACxB,YAAQ,MAAM,iCAAiC,IAAI,EAAE;AACrD;AAAA,EACF;AACA,KAAG,UAAU,IAAI,EAAE,WAAW,KAAK,CAAC;AACpC,KAAG,YAAY,IAAI,EAAE,QAAQ,CAAC,YAAY;AACxC,UAAM,OAAO,GAAG,UAAU,KAAK,KAAK,MAAM,OAAO,CAAC;AAClD,QAAI,KAAK,OAAO,GAAG;AACjB,SAAG,aAAa,KAAK,KAAK,MAAM,OAAO,GAAG,KAAK,KAAK,IAAI,OAAO,CAAC;AAAA,IAClE,WAAW,KAAK,YAAY,GAAG;AAC7B,qBAAe,KAAK,KAAK,MAAM,OAAO,GAAG,KAAK,KAAK,IAAI,OAAO,CAAC;AAAA,IACjE;AAAA,EACF,CAAC;AACH;AAGA,SAAS,oBAAoB;AAC3B,MAAI,CAAC,GAAG,WAAW,YAAY,GAAG;AAChC,YAAQ;AAAA,MACN;AAAA,IACF;AACA;AAAA,EACF;AACA,MAAI,CAAC,GAAG,WAAW,SAAS,GAAG;AAC7B,YAAQ,IAAI,4BAA4B,SAAS,KAAK;AACtD,mBAAe,cAAc,SAAS;AACtC,OAAG,cAAc,gBAAgB,MAAM;AACvC,YAAQ,IAAI,uBAAuB;AAAA,EACrC,WAAW,CAAC,GAAG,WAAW,cAAc,GAAG;AACzC,YAAQ,IAAI,mEAAmE;AAAA,EACjF,OAAO;AACL,YAAQ,IAAI,uDAAuD;AAAA,EACrE;AACF;AAGA,SAAS,sBAAsB;AAC7B,QAAM,eAAe;AAAA,IACnB;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF;AACA,QAAM,kBAAkB;AAAA,IACtB;AAAA,IACA;AAAA,EACF;AAEA,UAAQ,IAAI,gDAAgD;AAC5D,MAAI;AACF,aAAS,eAAe,aAAa,KAAK,GAAG,CAAC,IAAI;AAAA,MAChD,KAAK;AAAA,MACL,OAAO;AAAA,IACT,CAAC;AAGD,UAAM,eAAe,KAAK,KAAK,iBAAiB,eAAe;AAC/D,QAAI,GAAG,WAAW,YAAY,GAAG;AAC/B,cAAQ,IAAI,qDAAqD;AACjE,eAAS,0BAA0B,gBAAgB,KAAK,GAAG,CAAC,IAAI;AAAA,QAC9D,KAAK;AAAA,QACL,OAAO;AAAA,MACT,CAAC;AAAA,IACH;AACA,YAAQ,IAAI,sCAAsC;AAAA,EACpD,SAAS,OAAY;AACnB,YAAQ,MAAM,kCAAkC,MAAM,OAAO;AAE7D,YAAQ,KAAK,CAAC;AAAA,EAChB;AACF;AAGA,kBAAkB;AAClB,oBAAoB;","names":[]}