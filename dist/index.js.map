{"version":3,"sources":["../src/store/store.ts","../src/api/baseApi.ts","../src/slices/authSlice.ts","../src/hooks/index.ts","../src/utils/baseApiHandler.ts","../src/provider/ReduxProvider.tsx"],"sourcesContent":["// src/store/store.ts\r\nimport { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport { baseApi } from \"../api/baseApi\";\r\nimport authReducer from \"../slices/authSlice\";\r\n\r\n// Persist configuration for the auth slice\r\nconst authPersistConfig = {\r\n  key: \"auth\",\r\n  storage,\r\n};\r\n\r\n// Combine reducers, including persisted reducers\r\nconst rootReducer = combineReducers({\r\n  [baseApi.reducerPath]: baseApi.reducer,\r\n  auth: persistReducer(authPersistConfig, authReducer), // Persisted auth reducer\r\n});\r\n\r\n// Configure the Redux store\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n  middleware: (getDefaultMiddleware) =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: false, // Disable serializable checks for redux-persist compatibility\r\n    }).concat(baseApi.middleware), // Include RTK Query middleware\r\n  devTools: process.env.NODE_ENV !== \"production\", // Enable Redux DevTools in non-production environments\r\n});\r\n\r\n// Create a persistor for managing persisted state\r\nexport const persistor = persistStore(store);\r\n\r\n// Define TypeScript types for the store, dispatch, and state\r\nexport type AppStore = typeof store;\r\nexport type RootState = ReturnType<AppStore[\"getState\"]>;\r\nexport type AppDispatch = AppStore[\"dispatch\"];\r\n","// src/api/baseApi.ts\r\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\nimport { RootState } from \"../store/store\";\r\n\r\n// Utility function to handle the base API URL\r\nconst baseApiHandler = () => {\r\n  // You can configure this based on your environment or other needs\r\n  const apiUrl = process.env.API_BASE_URL || \"https://api.example.com\"; // Default API URL\r\n  return apiUrl;\r\n};\r\n\r\n// Define the base API using RTK Query\r\nexport const baseApi = createApi({\r\n  reducerPath: \"api\", // Unique name for the API slice\r\n  baseQuery: fetchBaseQuery({\r\n    baseUrl: baseApiHandler(), // Base URL from the utility function\r\n    prepareHeaders: (headers, { getState }) => {\r\n      // Access the token from the Redux state\r\n      const token = (getState() as RootState).auth.token;\r\n      if (token) {\r\n        // If token exists, add it to the Authorization header\r\n        headers.set(\"Authorization\", `Bearer ${token}`);\r\n      }\r\n      return headers;\r\n    },\r\n  }),\r\n  endpoints: (builder) => ({\r\n    // Define the API endpoints here\r\n    // Example:\r\n    // getUser: builder.query<User, void>({\r\n    //   query: () => \"/user\",\r\n    // }),\r\n    // Add other API endpoints as needed\r\n  }),\r\n  tagTypes: [\r\n    \"USER\", // Example tag type for cache invalidation\r\n    \r\n  ], // These are used for cache invalidation and re-fetching\r\n});\r\n","// src/slices/authSlice.ts\r\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\n\r\n// Define types for the login user and auth state\r\nexport interface LoginUser {\r\n  email: string;\r\n  name: string;\r\n  id: string;\r\n  role: string;\r\n  phone?: string;\r\n}\r\n\r\nexport interface AuthState {\r\n  user: LoginUser | null;\r\n  isAuthenticated: boolean;\r\n  isError: boolean;\r\n  loginLoading: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  token: string | null;\r\n}\r\n\r\n// Initial state for the auth slice\r\nconst initialState: AuthState = {\r\n  user: null,\r\n  isAuthenticated: false,\r\n  isError: false,\r\n  loginLoading: false,\r\n  isLoading: true,\r\n  error: null,\r\n  token: null,\r\n};\r\n\r\n// Create the auth slice\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    setUser: (state, action: PayloadAction<AuthState>) => {\r\n      const { user, token: accessToken } = action.payload;\r\n      state.user = user;\r\n      state.token = accessToken;\r\n      state.isAuthenticated = true;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n      state.isAuthenticated = false;\r\n      state.token = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { logout, setUser } = authSlice.actions;\r\nexport default authSlice.reducer;\r\n\r\n// Export the AuthState type to make it available in other files\r\n\r\n","// src/hooks/index.ts\r\nimport { TypedUseSelectorHook, useDispatch, useSelector } from \"react-redux\";\r\nimport type { RootState, AppDispatch } from \"../store/store\";\r\n\r\n// Typed useDispatch hook for dispatching actions\r\nexport const useAppDispatch = () => useDispatch<AppDispatch>();\r\n\r\n// Typed useSelector hook for accessing state in components\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","const baseApiHandler = (): string => {\r\n  const nextMode = process.env.NEXT_PUBLIC_MODE;\r\n\r\n  const prodLink = process.env.NEXT_PUBLIC_PROD_API_URL;\r\n  const devLink = process.env.NEXT_PUBLIC_DEV_API_URL;\r\n\r\n  if (!prodLink || !devLink) {\r\n    throw new Error(\"API URLs are not properly defined in the environment.\");\r\n  }\r\n\r\n  if (nextMode === \"dev\") {\r\n    return devLink;\r\n  }\r\n\r\n  if (nextMode === \"prod\") {\r\n    return prodLink;\r\n  }\r\n\r\n  throw new Error(\"mode is undefined, defaulting to production API.\");\r\n};\r\n\r\nexport default baseApiHandler;\r\n","// src/ReduxProvider.tsx\r\n'use client';\r\n\r\nimport React from 'react';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from '../store/store'; // Import the store you have created\r\n\r\ninterface ReduxProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nconst ReduxProvider: React.FC<ReduxProviderProps> = ({ children }) => {\r\n  return <Provider store={store}>{children}</Provider>;\r\n};\r\n\r\nexport default ReduxProvider;\r\n"],"mappings":";AACA,SAAS,gBAAgB,uBAAuB;AAChD,SAAS,cAAc,sBAAsB;AAC7C,OAAO,aAAa;;;ACFpB,SAAS,WAAW,sBAAsB;AAI1C,IAAM,iBAAiB,MAAM;AAE3B,QAAM,SAAS,QAAQ,IAAI,gBAAgB;AAC3C,SAAO;AACT;AAGO,IAAM,UAAU,UAAU;AAAA,EAC/B,aAAa;AAAA;AAAA,EACb,WAAW,eAAe;AAAA,IACxB,SAAS,eAAe;AAAA;AAAA,IACxB,gBAAgB,CAAC,SAAS,EAAE,SAAS,MAAM;AAEzC,YAAM,QAAS,SAAS,EAAgB,KAAK;AAC7C,UAAI,OAAO;AAET,gBAAQ,IAAI,iBAAiB,UAAU,KAAK,EAAE;AAAA,MAChD;AACA,aAAO;AAAA,IACT;AAAA,EACF,CAAC;AAAA,EACD,WAAW,CAAC,aAAa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOzB;AAAA,EACA,UAAU;AAAA,IACR;AAAA;AAAA,EAEF;AAAA;AACF,CAAC;;;ACrCD,SAAS,mBAAkC;AAsB3C,IAAM,eAA0B;AAAA,EAC9B,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,SAAS;AAAA,EACT,cAAc;AAAA,EACd,WAAW;AAAA,EACX,OAAO;AAAA,EACP,OAAO;AACT;AAGA,IAAM,YAAY,YAAY;AAAA,EAC5B,MAAM;AAAA,EACN;AAAA,EACA,UAAU;AAAA,IACR,SAAS,CAAC,OAAO,WAAqC;AACpD,YAAM,EAAE,MAAM,OAAO,YAAY,IAAI,OAAO;AAC5C,YAAM,OAAO;AACb,YAAM,QAAQ;AACd,YAAM,kBAAkB;AAAA,IAC1B;AAAA,IACA,QAAQ,CAAC,UAAU;AACjB,YAAM,OAAO;AACb,YAAM,kBAAkB;AACxB,YAAM,QAAQ;AAAA,IAChB;AAAA,EACF;AACF,CAAC;AAEM,IAAM,EAAE,QAAQ,QAAQ,IAAI,UAAU;AAC7C,IAAO,oBAAQ,UAAU;;;AF7CzB,IAAM,oBAAoB;AAAA,EACxB,KAAK;AAAA,EACL;AACF;AAGA,IAAM,cAAc,gBAAgB;AAAA,EAClC,CAAC,QAAQ,WAAW,GAAG,QAAQ;AAAA,EAC/B,MAAM,eAAe,mBAAmB,iBAAW;AAAA;AACrD,CAAC;AAGM,IAAM,QAAQ,eAAe;AAAA,EAClC,SAAS;AAAA,EACT,YAAY,CAAC,yBACX,qBAAqB;AAAA,IACnB,mBAAmB;AAAA;AAAA,EACrB,CAAC,EAAE,OAAO,QAAQ,UAAU;AAAA;AAAA,EAC9B,UAAU,QAAQ,IAAI,aAAa;AAAA;AACrC,CAAC;AAGM,IAAM,YAAY,aAAa,KAAK;;;AG7B3C,SAA+B,aAAa,mBAAmB;AAIxD,IAAM,iBAAiB,MAAM,YAAyB;AAGtD,IAAM,iBAAkD;;;ACR/D,IAAMA,kBAAiB,MAAc;AACnC,QAAM,WAAW,QAAQ,IAAI;AAE7B,QAAM,WAAW,QAAQ,IAAI;AAC7B,QAAM,UAAU,QAAQ,IAAI;AAE5B,MAAI,CAAC,YAAY,CAAC,SAAS;AACzB,UAAM,IAAI,MAAM,uDAAuD;AAAA,EACzE;AAEA,MAAI,aAAa,OAAO;AACtB,WAAO;AAAA,EACT;AAEA,MAAI,aAAa,QAAQ;AACvB,WAAO;AAAA,EACT;AAEA,QAAM,IAAI,MAAM,kDAAkD;AACpE;AAEA,IAAO,yBAAQA;;;ACjBf,SAAS,gBAAgB;AAQhB;AADT,IAAM,gBAA8C,CAAC,EAAE,SAAS,MAAM;AACpE,SAAO,oBAAC,YAAS,OAAe,UAAS;AAC3C;AAEA,IAAO,wBAAQ;","names":["baseApiHandler"]}